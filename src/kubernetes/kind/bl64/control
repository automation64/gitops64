#!/usr/bin/env bash
# Template: 1.1.0
#######################################
# Kind / Control
#
# Control script for Minikube cluster
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/gitops64
# Version: 3.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || { echo 'dev-set:Error: unable to load dev environment' 2>&1 && exit 1; }

# shellcheck source=src/infrastructure/gitops64/bl64-lib/setup
source "${DEV_PATH_SRC}/infrastructure/gitops64/bl64-lib/setup" || { echo "Error: unable to load gitops64 bash lib" && exit 1; }

# shellcheck source-path=lib/bl64
source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fmt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-bsh.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-xsv.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-txt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-ui.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-k8s.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-cnt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-core.bash" || { echo "Error: unable to load bashlib64" && exit 1; }

#
# Globals
#

export KIND_CLUSTER_CONTROL_KIND_BIN="${KIND_CLUSTER_CONTROL_KIND_BIN:-/usr/local/bin/kind}"
export KIND_CLUSTER_CONFIG=''

#
# Functions
#

function kind_control_kind_run() {
  bl64_dbg_app_show_function "$@"
  bl64_dbg_app_trace_start
  # shellcheck disable=SC2154
  "$KIND_CLUSTER_CONTROL_KIND_BIN" \
    --verbosity=2 \
    "$@"
  bl64_dbg_app_trace_stop
}

function kind_control_cluster_start() {
  bl64_dbg_app_show_function
  bl64_msg_show_task "start kind cluster"
  kind_control_kind_run \
    create cluster \
    --config "$KIND_CLUSTER_CONFIG" \
    --name "$KIND_CLUSTER_NAME"
}

function kind_control_cluster_delete() {
  bl64_dbg_app_show_function
  local network_kind='kind'
  bl64_ui_ask_confirmation \
    'Do you want to completely destroy the cluster?. Confirm by typing:' \
    'YES' &&
    kind_control_kind_run \
      delete cluster \
      --name "$KIND_CLUSTER_NAME"

  if bl64_cnt_network_is_defined "$network_kind"; then
    bl64_cnt_cli \
      network \
      rm \
      "$network_kind"
  fi
  return 0
}

function kind_control_cluster_show() {
  bl64_dbg_app_show_function
  bl64_msg_show_info 'cluster configuration'
  bl64_k8s_run_kubectl \
    "$BL64_VAR_DEFAULT" \
    cluster-info ||
    return $?

  bl64_msg_show_info 'kubernetes nodes IP range'
  printf '\nIPAM.Config: %s\n' \
    "$(
      bl64_cnt_cli \
        network \
        inspect \
        -f '{{.IPAM.Config}}' \
        kind
    )"
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function kind_control_initialize() {
  bl64_dbg_app_show_function "@"
  # shellcheck disable=SC2034
  local command="$1"
  local environment="$2"
  local profile="$3"

  # shellcheck disable=SC2015
  bl64_check_parameter 'command' &&
    bl64_check_parameter 'profile' &&
    bl64_check_parameter 'environment' ||
    { kind_control_help && return 1; }

  bl64_check_command "$KIND_CLUSTER_CONTROL_KIND_BIN" &&
    bl64_cnt_setup &&
    bl64_k8s_setup ||
    return $?

  gitops64_initialize "$environment" &&
    gitops64_setup_load "$environment" 'kubernetes/kind' "$profile" 'cluster' &&
    bl64_check_export 'KIND_CLUSTER_NAME' ||
    return $?

  KIND_CLUSTER_CONFIG="${DEV_PATH_ETC}/${environment}/kubernetes/kind/kind-${profile}/config.yaml"
  bl64_check_file "$KIND_CLUSTER_CONFIG"
}

#######################################
# Show script usage description
#
# Arguments:
#   None
# Outputs:
#   Command line format and description
# Returns:
#   0
#######################################
function kind_control_help() {
  bl64_msg_show_usage \
    '<-c|-s|-d> -e Environment [-p Profile] [-V Verbose] [-D Debug] [-h]' \
    'Minikube cluster control wrapper' \
    '
    -c            : Start cluster
    -s            : Show cluster details
    -d            : Delete (destroy) cluster
    ' '
    -h            : Show help
    ' '
    -e Environment: Environment name
    -p Profile    : Configuration profile
    -V Verbose    : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
    -D Debug      : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
    '
}

#
# Main
#

declare kind_control_debug="$BL64_DBG_TARGET_NONE"
declare kind_control_verbose="$BL64_MSG_VERBOSE_APP"
declare kind_control_command="$BL64_VAR_NULL"
declare kind_control_option=''
declare kind_control_environment="$BL64_VAR_NULL"
declare kind_control_profile="$BL64_VAR_DEFAULT"

(($# == 0)) && kind_control_help && exit 1
while getopts ':csde:p:V:D:h' kind_control_option; do
  case "$kind_control_option" in
  c) kind_control_command='cluster_start' ;;
  s) kind_control_command='cluster_show' ;;
  d) kind_control_command='cluster_delete' ;;
  e) kind_control_environment="$OPTARG" ;;
  p) kind_control_profile="$OPTARG" ;;
  V) kind_control_verbose="$OPTARG" ;;
  D) kind_control_debug="$OPTARG" ;;
  h) kind_control_help && exit 0 ;;
  *) kind_control_help && exit 1 ;;
  esac
done
bl64_dbg_set_level "$kind_control_debug" && bl64_msg_set_level "$kind_control_verbose" || exit $?
kind_control_initialize "$kind_control_command" "$kind_control_environment" "$kind_control_profile" || exit $?

bl64_msg_show_batch_start "$kind_control_command"
case "$kind_control_command" in
'cluster_start' | 'cluster_show' | 'cluster_stop' | 'cluster_delete') "kind_control_${kind_control_command}" ;;
*) bl64_check_alert_parameter_invalid "$kind_control_command" ;;
esac
bl64_msg_show_batch_finish $? "$kind_control_command"
