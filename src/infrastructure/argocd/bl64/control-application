#!/usr/bin/env bash
# Template: 1.1.0
#######################################
# ArgoCD / Control Application
#
# Control script for ArgoCD service
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/gitops64
# Version: 4.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || { echo 'dev-set:Error: unable to load dev environment' 2>&1 && exit 1; }

# shellcheck source=src/infrastructure/gitops64/bl64-lib/setup
source "${DEV_PATH_SRC}/infrastructure/gitops64/bl64-lib/setup" || { echo "Error: unable to load gitops64 bash lib" && exit 1; }

# shellcheck source-path=lib/bl64
source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-ui.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fmt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-bsh.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-xsv.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-txt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-k8s.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-core.bash" || { echo "Error: unable to load bashlib64" && exit 1; }

#
# Globals
#

export ARGOCD_CONTROL_ARGOCD_BIN="${ARGOCD_CONTROL_ARGOCD_BIN:-/usr/local/bin/argocd}"
export ARGOCD_CONTROL_MANIFESTS='kubernetes infrastructure resources applications'
export ARGOCD_CONTROL_KUBECONFIG_PATH="${ARGOCD_CONTROL_KUBECONFIG_PATH:-${HOME}/.kube/config}"

#
# Functions
#

# Required to prevent false positive on YAML generated shell-env
# shellcheck disable=SC2154
function argocd_control_run_cli() {
  bl64_dbg_app_show_function "$@"
  local access=''
  [[ "$ARGOCD_SERVER_ACCESS" == 'port-forward' ]] && access="--port-forward --port-forward-namespace ${ARGOCD_CLUSTER_NAMESPACE}"
  # shellcheck disable=SC2086
  "$ARGOCD_CONTROL_ARGOCD_BIN" \
    $access \
    "$@"
}

function argocd_control_list() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'list applications'
  argocd_control_run_cli \
    app list
}

function argocd_control_status() {
  bl64_dbg_app_show_function "$@"
  local app_id="$1"
  bl64_msg_show_task "show application status (${app_id})"
  argocd_control_run_cli \
    app get \
    "$app_id"
}

function argocd_control_sync() {
  bl64_dbg_app_show_function "$@"
  local app_id="$1"

  bl64_msg_show_task "sync application (${app_id})"
  argocd_control_run_cli \
    app sync \
    "$app_id"
}

function argocd_control_delete() {
  bl64_dbg_app_show_function "$@"
  local app_id="$1"

  bl64_msg_show_task "delete application (${app_id})"
  bl64_ui_ask_confirmation \
    'Please confirm this destructive action by typing:' 'YES' &&
    argocd_control_run_cli \
      app delete \
      --cascade \
      --yes \
      "$app_id"
}

# Required to prevent false positive on YAML generated shell-env
# shellcheck disable=SC2154
function argocd_control_deploy() {
  bl64_dbg_app_show_function "$@"
  local environment="$1"
  local target=''
  local runtime_path="${DEV_PATH_VAR}/${environment}/argocd"
  local kustomization=''

  for target in $ARGOCD_CONTROL_MANIFESTS; do
    kustomization="${runtime_path}/${target}"
    [[ ! -f "${kustomization}/kustomization.yaml" ]] && continue
    bl64_msg_show_task "deploy application definition group (${target})"
    bl64_k8s_run_kubectl \
      "$ARGOCD_CONTROL_KUBECONFIG_PATH" \
      apply \
      --overwrite='true' \
      --validate='strict' \
      --wait='true' \
      --kustomize "$kustomization" &&
      bl64_os_run_sleep 10
  done
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function argocd_control_initialize() {
  bl64_dbg_app_show_function "$@"
  local command="$1"
  local environment="$2"
  local profile="$3"
  local app_id="$4"

  # shellcheck disable=SC2015
  bl64_check_parameter 'command' &&
    bl64_check_parameter 'environment' ||
    { argocd_control_help && return 1; }

  bl64_check_command "$ARGOCD_CONTROL_ARGOCD_BIN" &&
    bl64_k8s_setup ||
    return $?

  gitops64_initialize "$environment" &&
    gitops64_setup_load 'all' 'argocd' "$profile" 'setup' &&
    gitops64_setup_load "$environment" 'infrastructure/argocd' "$profile" 'service' &&
    bl64_check_export 'ARGOCD_CLUSTER_NAMESPACE' ||
    return $?

  if [[ "$command" == 'sync' || "$command" == 'status' ]]; then
    bl64_check_parameter 'app_id' ||
      return $?
  fi
}

#######################################
# Show script usage description
#
# Arguments:
#   None
# Outputs:
#   Command line format and description
# Returns:
#   0
#######################################
function argocd_control_help() {
  bl64_msg_show_usage \
    '<-l|-y|-c|-s|-d> -e Environment [-p Profile] [-i AppID] [-V Verbose] [-D Debug] [-h]' \
    'Manage ArgoCD applications' \
    '
    -l            : List applications
    -y            : Sync application
    -c            : Deploy defined applications
    -s            : Show application status
    -d            : Delete application and related resources
    ' '
    -h            : Show help
    ' '
    -e Environment: Environment name
    -p Profile    : Configuration profile
    -i AppID      : Application ID
    -V Verbose    : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
    -D Debug      : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
    '
}

#
# Main
#

declare argocd_control_command="$BL64_VAR_NULL"
declare argocd_control_debug="$BL64_DBG_TARGET_NONE"
declare argocd_control_option=''
declare argocd_control_verbose="$BL64_MSG_VERBOSE_APP"
declare argocd_control_environment="$BL64_VAR_NULL"
declare argocd_control_profile="$BL64_VAR_DEFAULT"
declare argocd_control_app_id="$BL64_VAR_NULL"

(($# == 0)) && argocd_control_help && exit 1
while getopts ':lycsde:p:i:V:D:h' argocd_control_option; do
  case "$argocd_control_option" in
  l) argocd_control_command='list' ;;
  y) argocd_control_command='sync' ;;
  c) argocd_control_command='deploy' ;;
  s) argocd_control_command='status' ;;
  d) argocd_control_command='delete' ;;
  e) argocd_control_environment="$OPTARG" ;;
  p) argocd_control_profile="$OPTARG" ;;
  i) argocd_control_app_id="$OPTARG" ;;
  V) argocd_control_verbose="$OPTARG" ;;
  D) argocd_control_debug="$OPTARG" ;;
  h) argocd_control_help && exit 0 ;;
  *) argocd_control_help && exit 1 ;;
  esac
done
bl64_dbg_set_level "$argocd_control_debug" && bl64_msg_set_level "$argocd_control_verbose" || exit $?
argocd_control_initialize "$argocd_control_command" "$argocd_control_environment" "$argocd_control_profile" "$argocd_control_app_id" || exit $?

bl64_msg_show_batch_start "$argocd_control_command"
case "$argocd_control_command" in
'deploy') "argocd_control_${argocd_control_command}" "$argocd_control_environment" ;;
'list') "argocd_control_${argocd_control_command}" ;;
'sync' | 'status' | 'delete') "argocd_control_${argocd_control_command}" "$argocd_control_app_id" ;;
*) bl64_check_alert_parameter_invalid "$argocd_control_command" ;;
esac
bl64_msg_show_batch_finish $? "$argocd_control_command"
