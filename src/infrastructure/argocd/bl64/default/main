#!/usr/bin/env bash
# Template: 1.1.0
#######################################
# ArgoCD / Control Service
#
# Control script for ArgoCD service
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/gitops64
# Version: 5.1.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || { echo 'dev-set:Error: unable to load dev environment' 2>&1 && exit 1; }

# shellcheck source=src/infrastructure/gitops64/bl64/shared/setup
source "${DEV_PATH_SRC}/infrastructure/gitops64/bl64/shared/setup" || { echo "Error: unable to load gitops64 bash lib" && exit 1; }

# shellcheck source-path=lib/bl64source
source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-ui.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fmt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-bsh.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-xsv.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-hlm.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-txt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-k8s.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-core.bash" || { echo "Error: unable to load bashlib64" && exit 1; }

#
# Globals
#

export ARGOCD_MAIN_ARGOCD_BIN="${ARGOCD_MAIN_ARGOCD_BIN:-${DEV_LIB_ARGOCD_BIN}}"
export ARGOCD_MAIN_GH_BIN="${ARGOCD_MAIN_GH_BIN:-${DEV_LIB_GITHUB_BIN}}"
export ARGOCD_MAIN_KUBECONFIG_PATH="${ARGOCD_MAIN_KUBECONFIG_PATH:-${HOME}/.kube/config}"

declare ARGOCD_MAIN_REPOSITORY_NAME='argo'
declare ARGOCD_MAIN_REPOSITORY_URL='https://argoproj.github.io/argo-helm'
declare ARGOCD_MAIN_CHART_NAME='argocd'
declare ARGOCD_MAIN_KEY_PRIVATE=''
declare ARGOCD_MAIN_VAULT_ADMIN=''

#
# Functions
#

# Required to prevent false positive on YAML generated shell-env
# shellcheck disable=SC2154
function argocd_main_run_cli() {
  bl64_dbg_app_show_function "$@"
  local access=''
  [[ "$G64_ARGOCD_SERVER_ACCESS" == 'port-forward' ]] && access="--port-forward --port-forward-namespace ${G64_ARGOCD_CLUSTER_NAMESPACE}"
  # shellcheck disable=SC2086
  "$ARGOCD_MAIN_ARGOCD_BIN" \
    $access \
    "$@"
}

# Required to prevent false positive on YAML generated shell-env
# shellcheck disable=SC2154
function argocd_main_repo_add() {
  bl64_dbg_app_show_function "$@"
  local environment="$1"
  bl64_msg_show_task "register private repository (${G64_ARGOCD_GITOPS_REPOSITORY})"
  # shellcheck disable=SC2086
  argocd_main_run_cli \
    repo add \
    --ssh-private-key-path "$ARGOCD_MAIN_KEY_PRIVATE" \
    "$G64_ARGOCD_GITOPS_REPOSITORY"
}

# Required to prevent false positive on YAML generated shell-env
# shellcheck disable=SC2154
function argocd_main_remove() {
  bl64_dbg_app_show_function "$@"
  local environment="$1"

  bl64_msg_show_task "remove ArgoCD form Kubernetes Cluster (${environment})"
  bl64_ui_ask_confirmation \
    'Please confirm this destructive action by typing:' 'YES' &&
    bl64_hlm_run_helm \
      uninstall \
      --wait \
      --namespace "$G64_ARGOCD_CLUSTER_NAMESPACE" \
      "$ARGOCD_MAIN_CHART_NAME" ||
    return $?
  if [[ -f "$ARGOCD_MAIN_VAULT_ADMIN" ]]; then
    bl64_fs_rm_file "$ARGOCD_MAIN_VAULT_ADMIN"
  fi
}

# Required to prevent false positive on YAML generated shell-env
# shellcheck disable=SC2154
function argocd_main_login() {
  bl64_dbg_app_show_function "$@"
  local environment="$1"
  local password=''

  bl64_msg_show_task "login to ArgoCD cluster (${environment})"
  # shellcheck disable=SC2086
  password="$(<$ARGOCD_MAIN_VAULT_ADMIN)" &&
    argocd_main_run_cli \
      login \
      --username "$G64_ARGOCD_ADMIN_USER" \
      --password "$password"
}

# Required to prevent false positive on YAML generated shell-env
# shellcheck disable=SC2154
function argocd_main_password_get() {
  bl64_dbg_app_show_function
  local admin_secret='argocd-initial-admin-secret'
  bl64_msg_show_task "store initial admin password (${ARGOCD_MAIN_VAULT_ADMIN})"
  if [[ -f "$ARGOCD_MAIN_VAULT_ADMIN" ]]; then
    bl64_msg_show_warning 'there is already a password file. Remove it and re-run the task If a new one is needed'
  else
    # shellcheck disable=SC2005
    {
      bl64_k8s_run_kubectl \
        "$BL64_VAR_DEFAULT" \
        get secret \
        --namespace "$G64_ARGOCD_CLUSTER_NAMESPACE" \
        --output jsonpath="{.data.password}" \
        "$admin_secret" |
        bl64_txt_run_base64 --decode &&
        echo
    } >"$ARGOCD_MAIN_VAULT_ADMIN"
  fi
}

# Required to prevent false positive on YAML generated shell-env
# shellcheck disable=SC2154
function argocd_main_deploy() {
  bl64_dbg_app_show_function "$@"
  local environment="$1"
  local profile="$2"
  local chart_source='argo/argo-cd'
  local chart_values="${DEV_PATH_ETC}/${environment}/infrastructure/argocd/bl64/${profile}/helm-chart-values.yaml"

  bl64_check_file "$chart_values" ||
    return $?

  bl64_msg_show_task 'register ArgoCD Helm Repository'
  bl64_hlm_repo_add "$ARGOCD_MAIN_REPOSITORY_NAME" "$ARGOCD_MAIN_REPOSITORY_URL" ||
    return $?

  bl64_msg_show_task "deploy ArgoCD to Kubernetes Cluster (${environment})"
  bl64_hlm_chart_upgrade \
    "$ARGOCD_MAIN_KUBECONFIG_PATH" \
    "$G64_ARGOCD_CLUSTER_NAMESPACE" \
    "$ARGOCD_MAIN_CHART_NAME" \
    "$chart_source" \
    --values "$chart_values" ||
    return $?
  argocd_main_password_get
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
# Required to prevent false positive on YAML generated shell-env
# shellcheck disable=SC2154
function argocd_main_initialize() {
  bl64_dbg_app_show_function "$@"
  local command="$1"
  local environment="$2"
  local profile="$3"

  # shellcheck disable=SC2015
  bl64_check_parameter 'command' &&
    bl64_check_parameter 'environment' ||
    { argocd_main_help && return 1; }

  bl64_check_command "$ARGOCD_MAIN_ARGOCD_BIN" &&
    bl64_check_command "$ARGOCD_MAIN_GH_BIN" &&
    bl64_k8s_setup &&
    bl64_hlm_setup "$DEV_LIB_HELM_TARGET" ||
    return $?

  gitops64_initialize "$environment" &&
    gitops64_setup_load "$environment" 'infrastructure/argocd' "$profile" 'gitops64' &&
    bl64_check_export 'G64_ARGOCD_SERVER_ACCESS' &&
    bl64_check_export 'G64_ARGOCD_CLUSTER_CONTEXT' &&
    bl64_check_export 'G64_ARGOCD_CLUSTER_NAMESPACE' &&
    bl64_check_export 'G64_GITOPS64_KEY_DEPLOYMENT_PRIVATE' &&
    bl64_check_export 'G64_ARGOCD_ADMIN_USER' &&
    bl64_check_export 'G64_ARGOCD_ADMIN_VAULT' &&
    bl64_check_export 'G64_ARGOCD_GITOPS_REPOSITORY' ||
    return $?

  ARGOCD_MAIN_KEY_PRIVATE="${DEV_PATH_VAULT}/${environment}/${G64_GITOPS64_KEY_DEPLOYMENT_PRIVATE}"
  ARGOCD_MAIN_VAULT_ADMIN="${DEV_PATH_VAULT}/${environment}/${G64_ARGOCD_ADMIN_VAULT}"

  if [[ "$command" == 'repo_add' ]]; then
    bl64_check_file "$ARGOCD_MAIN_KEY_PRIVATE" 'missing deploy key file. Please generate one and retry'
  elif [[ "$command" == 'login' ]]; then
    bl64_check_file "$ARGOCD_MAIN_VAULT_ADMIN" 'missing admin password file. Please generate one and retry'
  fi
}

#######################################
# Show script usage description
#
# Arguments:
#   None
# Outputs:
#   Command line format and description
# Returns:
#   0
#######################################
function argocd_main_help() {
  bl64_msg_show_usage \
    '<-c|-d|-k|-l|-w> -e Environment -p Profile [-V Verbose] [-D Debug] [-h]' \
    'Manage ArgoCD service deployment' \
    '
    -c            : Deploy ArgoCD to Kubernetes Cluster
    -d            : Remove ArgoCD from Kubernetes Cluster
    -k            : Register private GIT repository
    -l            : Login to ArgoCD server
    -w            : Get fist-time admin password
    ' '
    -h            : Show help
    ' '
    -e Environment: Environment name
    -p Profile    : Configuration profile
    -V Verbose    : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
    -D Debug      : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
    '
}

#
# Main
#

declare argocd_main_command="$BL64_VAR_NULL"
declare argocd_main_debug="$BL64_DBG_TARGET_NONE"
declare argocd_main_option=''
declare argocd_main_verbose="$BL64_MSG_VERBOSE_APP"
declare argocd_main_environment="$BL64_VAR_NULL"
declare argocd_main_profile="$BL64_VAR_DEFAULT"

(($# == 0)) && argocd_main_help && exit 1
while getopts ':cdlkwe:p:V:D:h' argocd_main_option; do
  case "$argocd_main_option" in
  c) argocd_main_command='deploy' ;;
  d) argocd_main_command='remove' ;;
  l) argocd_main_command='login' ;;
  k) argocd_main_command='repo_add' ;;
  w) argocd_main_command='password_get' ;;
  e) argocd_main_environment="$OPTARG" ;;
  p) argocd_main_profile="$OPTARG" ;;
  V) argocd_main_verbose="$OPTARG" ;;
  D) argocd_main_debug="$OPTARG" ;;
  h) argocd_main_help && exit 0 ;;
  *) argocd_main_help && exit 1 ;;
  esac
done
bl64_dbg_set_level "$argocd_main_debug" && bl64_msg_set_level "$argocd_main_verbose" || exit $?
argocd_main_initialize "$argocd_main_command" "$argocd_main_environment" "$argocd_main_profile" || exit $?

bl64_msg_show_batch_start "$argocd_main_command"
case "$argocd_main_command" in
'deploy') "argocd_main_${argocd_main_command}" "$argocd_main_environment" "$argocd_main_profile" ;;
'remove' | 'login') "argocd_main_${argocd_main_command}" "$argocd_main_environment" ;;
'repo_add' | 'password_get') "argocd_main_${argocd_main_command}" "$argocd_main_environment" ;;
*) bl64_check_alert_parameter_invalid "$argocd_main_command" ;;
esac
bl64_msg_show_batch_finish $? "$argocd_main_command"
